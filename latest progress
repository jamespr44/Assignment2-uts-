int PIN_POT = A2;
String trafficVAR = "";
String pedestrianVAR = "";
  
  
  
/////////// setup for millis print (unsigned long is largest arduino variable size)
unsigned long currentTime = 0;
unsigned long previousTime = 0;
	@@ -99,19 +99,19 @@ void loop() {

  //PW_input = Serial.readString();  // reads from serial input and sets PW_input String as input from monitor.
  if (Serial.available()) {
  char receivedChar = Serial.read();
  if (receivedChar == '\n') {  // Check for newline character
    // Process the entered password (PW_input) here
    // Reset PW_input for the next input
   PW_input = "";
  } else {
    // Append the received character to the password
    PW_input += receivedChar;
  }
}

  if (PW_input == "Crossyroad") {              // if the PW_input string is the correct password "Hello" it prints out "Access Granted"
   
    trigger = !trigger;  // bool trigger is flipped to oposite value (false to true, or true to false)
  }

	@@ -122,49 +122,49 @@ void loop() {

    if (currentTime - previousTime > 1000) {
      Serial.print("| BUTTON ");
      Serial.print(buttonVAR); 
      Serial.print(" | POTENTIOMETER ");
      Serial.print(analogRead(PIN_POT));
      Serial.print(" | TRAFFIC "); 
      Serial.print(trafficVAR); 
      Serial.print(" | PEDESTRIAN "); 
      Serial.print(pedestrianVAR);
      Serial.println(" |");
      
      previousTime = currentTime;  // reset previousTime so currentTime and previousTime are identical.
    }
  }


  if (digitalRead(button) == HIGH) {
    buttonVAR = "Pressed";
  }
  else {
    buttonVAR = "Unpressed";
  }

    


  if ((digitalRead(button) == HIGH) && (sequenceactive == false)) {
    Bpressed = millis();
    sequenceactive = true;  // Set the sequenceactive flag
    ssdNumberWrite(0);
  }

  if (sequenceactive) {  // Only execute the sequence when the flag is set
    if (i < a) {
      setColour(1); // Traffic green
      trafficVAR = "GREEN ";
    }

    if (i >= a) {
      setColour(2); // Traffic yellow
      trafficVAR = "YELLOW";
    }

    if (i >= a + b) {
      setColour(0); // Traffic red
      trafficVAR = "RED   ";
    }

	@@ -183,25 +183,27 @@ void loop() {
        ssdNumberWrite(ssdcounter);
      }
    }
  }



  ///BLINKING START
  if (i >= a + b + c + d) {


    if (millis() - countchange >= 1000 && ssdcounter != 0) {
      countchange = millis();
      ssdcounter--;
      if (ssdcounter == -1) {
        ssdcounter = 4;
      }
      ssdNumberWrite(ssdcounter);
    }

    digitalWrite(greenLed2, LOW);
    pedestrianVAR = "GREEN ";

    if (counter > 0) {
      if (millis() - previousmillis >= interval) {
	@@ -213,23 +215,24 @@ void loop() {

        } else if (digitalRead(redLed2) == HIGH) {
          digitalWrite(redLed2, LOW);
          

          counter--;
        }

        sequenceactive = false;
        counter = 20;
      }

      if (i >= a + b + c + d + f) {
        digitalWrite(greenLed2, LOW);
        digitalWrite(redLed2, HIGH);
        setColour(0);
        ssdNumberWrite(0);
        pedestrianVAR = "RED   ";
        trafficVAR = "RED   ";  

      }


	@@ -238,14 +241,17 @@ void loop() {
        setColour(1);
        trafficVAR = "GREEN ";
      }
    }
  }
}



void ssdNumberWrite(int number) {
  for (int i = 0; i < 7; i++) {
    digitalWrite(segAtoGpinouts[i], num_array[number][i]);
  }
}
